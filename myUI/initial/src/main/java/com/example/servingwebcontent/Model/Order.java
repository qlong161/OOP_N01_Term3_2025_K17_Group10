package com.example.servingwebcontent.Model;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

public class Order {
    private String orderId;
    private Customer customer;
    private User user;  // üîπ th√™m user (ng∆∞·ªùi x·ª≠ l√Ω ƒë∆°n h√†ng)
    private Map<Product, Integer> items;
    private String status;
    private LocalDateTime date;

    // Constructor ƒë∆°n gi·∫£n (m·∫∑c ƒë·ªãnh user l√† null)
    public Order(String orderId, Customer customer) {
        try {
            this.orderId = orderId;
            this.customer = customer;
            this.user = null;
            this.items = new HashMap<>();
            this.status = "ch∆∞a x·ª≠ l√Ω";
            this.date = LocalDateTime.now();
        } catch (Exception e) {
            System.err.println("L·ªói kh·ªüi t·∫°o ƒë∆°n h√†ng: " + e.getMessage());
        } finally {
            System.out.println("Kh·ªüi t·∫°o order ƒë∆°n gi·∫£n ho√†n t·∫•t.");
        }
    }

    // Constructor ƒë·∫ßy ƒë·ªß
    public Order(String orderId, Customer customer, User user, String status, LocalDateTime date) {
        try {
            this.orderId = orderId;
            this.customer = customer;
            this.user = user;
            this.items = new HashMap<>();
            this.status = status;
            this.date = date;
        } catch (Exception e) {
            System.err.println("L·ªói kh·ªüi t·∫°o ƒë∆°n h√†ng v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß: " + e.getMessage());
        } finally {
            System.out.println("Kh·ªüi t·∫°o order ƒë·∫ßy ƒë·ªß ho√†n t·∫•t.");
        }
    }

    public void addProduct(Product product, int quantity) {
        try {
            if (product == null || quantity <= 0) {
                throw new IllegalArgumentException("S·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá ho·∫∑c s·ªë l∆∞·ª£ng <= 0");
            }
            items.put(product, items.getOrDefault(product, 0) + quantity);
        } catch (Exception e) {
            System.err.println("L·ªói khi th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng: " + e.getMessage());
        } finally {
            System.out.println("Th√™m s·∫£n ph·∫©m ho√†n t·∫•t.");
        }
    }

    // Getter & Setter cho user
    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        try {
            if (user == null) throw new IllegalArgumentException("Ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c null");
            this.user = user;
        } catch (Exception e) {
            System.err.println("L·ªói c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng x·ª≠ l√Ω ƒë∆°n h√†ng: " + e.getMessage());
        } finally {
            System.out.println("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng ho√†n t·∫•t.");
        }
    }

    public String getOrderId() {
        return orderId;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        try {
            if (customer == null) throw new IllegalArgumentException("Kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c null");
            this.customer = customer;
        } catch (Exception e) {
            System.err.println("L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng: " + e.getMessage());
        } finally {
            System.out.println("C·∫≠p nh·∫≠t kh√°ch h√†ng ho√†n t·∫•t.");
        }
    }

    public Map<Product, Integer> getItems() {
        return items;
    }

    public void setItems(Map<Product, Integer> items) {
        try {
            if (items == null) throw new IllegalArgumentException("Danh s√°ch s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c null");
            this.items = items;
        } catch (Exception e) {
            System.err.println("L·ªói khi c·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m: " + e.getMessage());
        } finally {
            System.out.println("C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m ho√†n t·∫•t.");
        }
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        try {
            this.status = status;
        } catch (Exception e) {
            System.err.println("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng: " + e.getMessage());
        } finally {
            System.out.println("C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ho√†n t·∫•t.");
        }
    }
    public Order(String orderId, Customer customer, String status, LocalDateTime date) {
        this.orderId = orderId;
        this.customer = customer;
        this.status = status;
        this.date = date;
        this.items = new HashMap<>(); // n·∫øu ch∆∞a kh·ªüi t·∫°o
    }

    public LocalDateTime getDate() {
        return date;
    }

    public String getFormattedDate() {
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            return date.format(formatter);
        } catch (Exception e) {
            System.err.println("L·ªói ƒë·ªãnh d·∫°ng ng√†y: " + e.getMessage());
            return "Kh√¥ng x√°c ƒë·ªãnh";
        } finally {
            System.out.println("ƒê·ªãnh d·∫°ng ng√†y ho√†n t·∫•t.");
        }
    }

    public double calculateTotalPrice() {
        double total = 0;
        try {
            for (Map.Entry<Product, Integer> entry : items.entrySet()) {
                total += entry.getKey().getPrice() * entry.getValue();
            }
        } catch (Exception e) {
            System.err.println("L·ªói t√≠nh t·ªïng ti·ªÅn: " + e.getMessage());
        } finally {
            System.out.println("T√≠nh t·ªïng ti·ªÅn ho√†n t·∫•t.");
        }
        return total;
    }

    public void displayOrder() {
        try {
            System.out.println("M√£ ƒë∆°n h√†ng: " + orderId);
            System.out.println("Kh√°ch h√†ng: ");
            customer.displayInfo();

            System.out.println("Ng∆∞·ªùi x·ª≠ l√Ω ƒë∆°n: " + (user != null ? user.getName() : "Ch∆∞a c√≥"));

            System.out.println("Danh s√°ch s·∫£n ph·∫©m:");
            for (Map.Entry<Product, Integer> entry : items.entrySet()) {
                Product p = entry.getKey();
                int qty = entry.getValue();
                System.out.printf("- %s | SL: %d | ƒê∆°n gi√°: %.2f | Th√†nh ti·ªÅn: %.2f\n",
                        p.getName(), qty, p.getPrice(), p.getPrice() * qty);
            }

            System.out.println("T·ªïng ti·ªÅn: " + calculateTotalPrice());
            System.out.println("Tr·∫°ng th√°i ƒë∆°n h√†ng: " + status);
            System.out.println("Ng√†y ƒë·∫∑t: " + getFormattedDate());
        } catch (Exception e) {
            System.err.println("L·ªói hi·ªÉn th·ªã ƒë∆°n h√†ng: " + e.getMessage());
        } finally {
            System.out.println("K·∫øt th√∫c x·ª≠ l√Ω hi·ªÉn th·ªã ƒë∆°n h√†ng.");
        }
    }
}
